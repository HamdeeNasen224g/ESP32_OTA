#include <WiFi.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <HTTPClient.h> // Add this line
#include <SPIFFS.h>

const char* ssid = "HAMDEE@TOT_2.4G";
const char* password = "0989181002";
const char* repoUrl = "https://github.com/{owner}/{repo}/raw/{branch}/{path}/firmware.bin";

// Set the LED pin number
const int ledPin = 2; // Assuming the blue LED is connected to GPIO pin 2

void setup() {
  Serial.begin(115200);
  
   // Set the LED pin as an output
  pinMode(ledPin, OUTPUT);
  
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  // Port defaults to 3232
  // ArduinoOTA.setPort(3232);

  // Hostname defaults to esp3232-[MAC]
  // ArduinoOTA.setHostname("myesp32");

  // No authentication by default
  // ArduinoOTA.setPassword("admin");

  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

  ArduinoOTA
    .onStart([]() {
      String type;
      if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
      else // U_SPIFFS
        type = "filesystem";

      // NOTE: if updating SPIFFS this would be the place to unmount SPIFFS using SPIFFS.end()
      Serial.println("Start updating " + type);
    })
    .onEnd([]() {
      Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
      Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
      Serial.printf("Error[%u]: ", error);
      if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
      else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
      else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
      else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
      else if (error == OTA_END_ERROR) Serial.println("End Failed");
    });

   // Download firmware.bin from GitHub
  downloadFirmware();

  // Start OTA server
  ArduinoOTA.begin();

  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void downloadFirmware() {
  HTTPClient http;
  http.begin(repoUrl);

  int httpCode = http.GET();
  if (httpCode == HTTP_CODE_OK) {
    WiFiClient* stream = http.getStreamPtr();

    // Create a file on SPIFFS to store the downloaded firmware.bin
    File file = SPIFFS.open("/firmware.bin", FILE_WRITE);
    if (!file) {
      Serial.println("Failed to create file");
      return;
    }

    // Write the downloaded data to the file
    while (stream->available()) {
      file.write(stream->read());
    }

    // Close the file
    file.close();
    Serial.println("Firmware downloaded successfully");
  } else {
    Serial.println("Firmware download failed");
  }

  http.end();
}

void loop() {
  ArduinoOTA.handle();
  LEDlight();
}

void LEDlight() {
  // Turn on the LED
  digitalWrite(ledPin, HIGH);

  // Delay for 1000 milliseconds (1 second)
  delay(1000);

  // Turn off the LED
  digitalWrite(ledPin, LOW);

  // Delay for 1000 milliseconds (1 second)
  delay(1000);
}
